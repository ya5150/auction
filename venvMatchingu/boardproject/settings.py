"""
Django settings for boardproject project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-#6@jh5#jqs3j$9riwrx2cg3$f_af5@wx6d-pnr-k+^*%(@^dbc'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "boardapp.apps.BoardappConfig",
    'django_celery_beat',
    'django_celery_results',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'boardproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'boardproject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'ja'

TIME_ZONE = 'Asia/Tokyo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/



# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


#_______________________________________________________________________________
#ユーザーがアップロードした画像などの保存先
MEDIA_ROOT = BASE_DIR/ "media"
#メディア参照時のurlパターンを設定する
MEDIA_URL = "medi/"

#_______________________________________________________________

#製作者用ファイルのurl
STATIC_URL = 'static/'
#本番環境で複数のファイルを一つにまとめるときの場所
STATIC_ROOT = BASE_DIR / 'staticfiles'

#静止ファイルをアプリごとに管理する(今回はプロジェクトのみで管理)
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

LOGIN_URL = "login"



# settings.py
import os

# RabbitMQの接続情報
BROKER_HOST = 'http://127.0.0.1/'
BROKER_PORT = 5672
BROKER_VHOST = '/'
BROKER_USER = 'username'
BROKER_PASSWORD = 'password'

# Celeryの設定
CELERY_BROKER_URL = f'amqp://{BROKER_USER}:{BROKER_PASSWORD}@{BROKER_HOST}:{BROKER_PORT}/{BROKER_VHOST}'
CELERY_RESULT_BACKEND = 'rpc://'
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TIMEZONE = 'Asia/Tokyo'
CELERY_ENABLE_UTC = True
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# Django Celery Beatの設定
CELERY_BEAT_SCHEDULE = {
    'auction_end_check': {
        'task': 'boardapp.task.auction_end_check',
        'schedule': 10, # 1分ごとに実行
    },
}

# Django Celery Resultsの設定
CELERY_RESULT_BACKEND = 'django-db'
CELERY_CACHE_BACKEND = 'django-cache'


# ローカル開発環境の場合のみ有効にする
if os.environ.get('DJANGO_DEVELOPMENT') == 'True':
    INSTALLED_APPS += ['debug_toolbar']

    MIDDLEWARE = [
        'debug_toolbar.middleware.DebugToolbarMiddleware',
        # ... 他のミドルウェア
    ]

    # Django Debug Toolbarの設定
    DEBUG_TOOLBAR_CONFIG = {
        'SHOW_COLLAPSED': True,
    }
    
BROKER_URL = 'amqp://username:password@127.0.0.1:5672//'
CELERY_RESULT_BACKEND = 'amqp://username:password@127.0.0.1:5672//'
# settings.py

CELERY_BROKER_URL = 'amqp://guest:guest@localhost:5672//'
CELERY_RESULT_BACKEND = 'django-db'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_ALWAYS_EAGER = False
CELERY_TASK_SERIALIZER = 'json'
from celery import Celery

app = Celery('proj')
app.config_from_object('django.conf:settings', namespace='CELERY')
app.autodiscover_tasks()

# CELERY_IMPORTS の設定
CELERY_IMPORTS = (
    "boardapp.task",
)
